* Dependencies
Currently, this configuration has only been tested in arch-based systems. It is needed the package nerd-fonts-mononoki for the correct display of the font.

Once installed it is needed to run: M-x all-the-icons-install-fonts in order to get the status bar with appealing icons.

Sometimes packages can't be downloaded, this may be due to a lack of syncronism, try sunning package-refresh-contents or list-packages
* Built-in config
** dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :after evil-collection
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))
#+end_src

#+begin_src emacs-lisp
  (use-package dired-single)
#+end_src
** Org mode configuration
*** Updates to org-mode and some customization
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-ellipsis " ▾")
    (setq org-log-done 'time)
    )
#+end_src
*** Indentation
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
*** Enable line wrapping
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+end_src
*** Agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/hdd/org-agenda"))
#+end_src
*** Agenda shows higher levels
This option allows the visualization of different "asterisks" levels in the agenda view
#+begin_src emacs-lisp
  (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
   (todo . " %i %-12:c")
   (tags . " %i %-12:c")
   (search . " %i %-12:c")))
#+end_src
*** Do not prompt for code execution
#+begin_src emacs-lisp
   (setq org-confirm-babel-evaluate nil)
#+end_src
*** Code evaluation
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (lisp . t)
                               (octave . t)
                               ))
#+end_src
*** Weeks in calendar starts in Mondays
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src
** Disable menu bar, tool bar and scroll bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Disable splash screen
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src

** Disable backups and automatic save
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** Line numbers configuration
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+end_src
** Column number
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src
** Current line highlight
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src
** Natural scroll when going beyond the screen
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src
** Enable ibuffer
Ibuffer is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as Dired. The most important Ibuffer features are highlighting and various alternate layouts.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** Enable parenthesis matching highlight
   #+begin_src emacs-lisp
     (show-paren-mode 1)
   #+end_src
** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    )

#+end_src
** Do not save X clipboard when closing emacs
I think that if this was not nil, then emacs hanged up on closing
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+end_src
* MELPA packages
** which-key
which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings).
[[https://github.com/justbur/emacs-which-key][github page]]

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1)
    )
#+end_src
** beacon
Whenever the window scrolls a light will shine on top of your cursor so you know where it is.
[[https://github.com/Malabarba/beacon][github page]]
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src
** org-bullets
Show org-mode bullets as UTF-8 characters.
[[https://github.com/sabof/org-bullets][github page]]
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** ivy
Ivy is a generic completion mechanism for Emacs. While it operates similarly to other completion schemes such as icomplete-mode, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.

[[https://github.com/abo-abo/swiper][github]]

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))
#+end_src
** counsel
ivy-mode ensures that any Emacs command using completing-read-function uses ivy for completion.

Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy. For example, counsel-find-file has some additional keybindings. Pressing DEL will move you to the parent directory.

Enabling counsel-mode remaps built-in Emacs functions that have counsel replacements.

[[https://github.com/abo-abo/swiper][github]]

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq ivy-initial-inputs-alist nil) ; Don't start searches with ^
    (counsel-mode 1))

  ;; Switch buffer functionality
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
#+end_src
** ivy-rich
This package comes with rich transformers for commands from ivy and counsel. It should be easy enough to define your own transformers too.

[[https://github.com/Yevgnen/ivy-rich][github]]

#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))
#+end_src
** helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.

[[https://github.com/Wilfred/helpful][github]]

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-hey] . helpful-key)
    )
#+end_src
** avy
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree.
[[https://github.com/abo-abo/avy][github page]]
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
** Rainbow packages
*** rainbow-mode
This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background.
[[https://elpa.gnu.org/packages/rainbow-mode.html][gnu elpa page]]
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src
*** raimbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
[[https://github.com/Fanael/rainbow-delimiters][github page]]
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src
** sudo-edit
Provides a way of editting files as sudo. Currently I don't see the need of assing it a keybinding.
[[https://github.com/nflath/sudo-edit][github page]]
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src
** dashboard
An extensible emacs startup screen showing you what’s most important.

FEATURES:
- Displays an awesome Emacs banner!
- Recent files
- Bookmarks list
- Recent projects list (Depends on `projectile` or `project.el` package)
- Org mode agenda
- Register list
[[https://github.com/emacs-dashboard/emacs-dashboard][github page]]
#+begin_src emacs-lisp
      (use-package dashboard
        :ensure t
        :config
        (dashboard-setup-startup-hook)
    )

  (setq dashboard-items '((agenda)
                          (projects . 5)
                          (recents . 10)))
  (setq show-week-agenda-p t)
  (setq dashboard-startup-banner 'logo)
  ;(setq dashboard-banner-logo-title (emacs-version))
  ;(setq dashboard-center-content t)
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config (projectile-mode)
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    )

  ;; Integration with counsel for extra options with M-o, such as open files directly in new windows
  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode)
    )
#+end_src
** company
*** company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

It comes with several back-ends such as Elisp, Clang, Semantic, Eclim, Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files, keywords and a few others.

The CAPF back-end provides a bridge to the standard completion-at-point-functions facility, and thus works with any major mode that defines a proper completion function.
[[https://company-mode.github.io/][Official page]]

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    ;:hook (prog-mode . company-mode)
    :custom
    (company-idle-delay 0.0)

    :config
    (setq company-minimum-prefix-length 1)

    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
                ("<tab>" . company-indent-or-complete-common))
    )
#+end_src
*** company-lsp
[[https://github.com/tigersoldier/company-lsp][github page]]
PACKAGE NO LONGER AVAILABLE

It provides features that are not available by using company-capf + lsp-mode:

    Support trigger characters. For example typing . will trigger completion for TypeScript.
    Use completion item's label as completion labels and replace it with its insertText if available.
    Fetch completion candidates asynchronously (Thanks @sebastiencs).
    Apply text edits specified by completion candidates after completion.
    Do not cache the completion candidates if they are incomplete.
    Expand snippets on completion (requires yasnippet).

#+begin_src emacs-lisp
;;  (use-package company-lsp
;;    :ensure t
;;    )
#+end_src

*** company-box
A company front-end with icons.
#+begin_src emacs-lisp
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src

*** remap some keys
#+begin_src emacs-lisp
  ;; Remap the navigation to C-n and C-p instead of M-n and M-p
  (with-eval-after-load 'company
    (define-key-after company-active-map (kbd "M-n") nil)
    (define-key-after company-active-map (kbd "M-p") nil)


    (define-key-after company-active-map (kbd "C-j") #'company-select-next)
    (define-key-after company-active-map (kbd "C-k") #'company-select-previous)
    )
#+end_src

** doom-modeline
The package all-the-icons is needed for this package to be visually appealing

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

** doom-themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;;(doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** all-the-icons
Once installed it is needed to run: M-x all-the-icons-install-fonts
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  )
#+end_src
** popup-kill-ring
- My comment:
This package shows the kill-ring when cycling through it

- Official comment:
browse your emacs kill ring in an autocomplete style popup menu 

[[https://github.com/waymondo/popup-kill-ring][github page]]
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
** evil-mode
*** evil-mode
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
[[https://github.com/emacs-evil/evil][github page]]
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    ;; The folloeing two lines are meant for evil-collection to work
    (setq evil-want-integration t) 
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :custom
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
  )


  (global-set-key (kbd "C-+") 'evil-window-increase-height)
  (global-set-key (kbd "C--") 'evil-window-decrease-height)
  (global-set-key (kbd "C-*") 'evil-window-decrease-width)
  (global-set-key (kbd "C-_") 'evil-window-increase-width)

#+end_src
*** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after evil
    :custom
    (evil-collection-company-use-tng nil)
    :config
    (evil-collection-init))
#+end_src
** swiper
Better emacs search
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+end_src
** yasnippet
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. 
[[https://github.com/joaotavora/yasnippet][github page]]

Installation
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    :bind
    (:map yas-minor-mode-map
          ([C-tab] . yas-expand-from-trigger-key))
    )
#+end_src

Initialization
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'yas-minor-mode)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'org-mode-hook 'yas-minor-mode)
#+end_src
** auctex
Base package
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    ((require 'tex-site)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTex t)
    (global-font-lock-mode t)))
#+end_src

References
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'reftex-mode)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

Electric dollar symbols
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
             (lambda () (set (make-local-variable 'TeX-electric-math)
                             (cons "$" "$"))))
#+end_src

Electric left and right
#+begin_src emacs-lisp
  (setq TeX-arg-right-insert-p t)
  (setq LaTeX-electric-left-right-brace t)
#+end_src

Math mode enabled (C-c ~)
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+end_src

Automatic braces when using ^ or _
#+begin_src emacs-lisp
  (setq TeX-electric-sub-and-superscript t)
#+end_src

Autofill mode
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
#+end_src

Prettify symbols
#+begin_src emacs-lisp
  ;(add-hook 'LaTeX-mode-hook
  ;          (lambda () (local-set-key (kbd "C-c p") #'prettify-symbols-mode)))
#+end_src

Use pdf-tools as pdf viewwe
#+begin_src emacs-lisp
   ;; to use pdfview with auctex
   (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

   ;; to have the buffer refresh after compilation
   (add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src

Enable synctex
#+begin_src emacs-lisp
  (setq LaTeX-command "latex --synctex=1")
#+end_src

** haskell-mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    )

  (require 'haskell-mode)
#+end_src
** lsp-mode
*** lsp-mode
Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.

IT IS NEEDED TO INSTALL THE PARTICULAR LANGUAGE SERVER FOR EACH ONE IT IS DESIRED TO USE.

[[https://emacs-lsp.github.io/lsp-mode/page/installation/][Their website]]

[[https://youtu.be/E-NAM9U5JYE][Configure languages 12:58]]

#+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t

      :hook ((prog-mode . lsp-mode)
             (TeX-latex-mode . lsp-mode)
             (latex-mode . lsp-mode)
             (tex-mode . lsp-mode)
             )
  ;    :commands (lsp lsp-deferred);Both commands activate lsp-mode when called
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (lsp-enable-which-key-integration t)
      )
#+end_src

*** lsp-ui
#+begin_src emacs-lisp
    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom)
      )

    (require 'lsp-mode)
#+end_src

*** lsp-python-ms
#+begin_src emacs-lisp
  ;;(use-package lsp-python-ms
  ;;  :ensure t
  ;;  :hook (python-mode . (lambda ()
  ;;                         (require 'lsp-python-ms)
  ;;                         (lsp)))
  ;;  :init
  ;;  (setq lsp-python-ms-executable (executable-find "python-language-server")))
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (lsp))))  ; or lsp-deferred
#+end_src
** pyenv
Adds support for python virtual environments (venv)
#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    )

  (require 'pyvenv)
#+end_src
** dap-mode
Used to debug functionality.
[[https://emacs-lsp.github.io/dap-mode/page/configuration/][Configuration for each language]]

#+begin_src emacs-lisp
  (use-package dap-mode
    :config
    (dap-ui-mode 1)
    )
#+end_src

** gdscript-mode
This package adds support for the GDScript programming language from the Godot game engine in Emacs.
[[https://github.com/godotengine/emacs-gdscript-mode][github page]]
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :ensure t
    :hook (gdscript-mode . lsp-deferred)
    )

  (require 'gdscript-mode)
#+end_src

** evil-nerd-commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** magit
Magit is an interface to the version control system Git, implemented as an Emacs package. 
[[https://github.com/magit/magit][github page]]
[[https://magit.vc/][Their website]]
[[https://emacsair.me/2017/09/01/magit-walk-through/][Tutorial 1]]
[[https://emacsair.me/2017/09/01/the-magical-git-interface/][Tutorial 2]]

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :after evil evil-collection
    )
#+end_src
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    )
#+end_src
** switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "h" "j" "l"))
    :bind
    ([remap other-window] . switch-window)
    )
#+end_src
** centaur-tabs
Aesthetic, functional and efficient tabs plugin for Emacs with a lot of customization options
[[https://github.com/ema2159/centaur-tabs][github page]]

#+begin_src emacs-lisp
;  (use-package centaur-tabs
;    :ensure t
;    :config
;    (centaur-tabs-mode t)
;    )
;
;  (require 'centaur-tabs)
;  
;;style of the tabs: if they're rounded, square, etc.
;(setq centaur-tabs-style "chamfer")
;;Height of the bar
;(setq centaur-tabs-height 32)
;;Show icons in the tabs (all-the-icons package needed)
;(setq centaur-tabs-set-icons t)
;;Gray out icons for the unseleted tabs
;(setq centaur-tabs-gray-out-icons 'buffer)
;;Display a colored bar at the left of the selected tab
;(setq centaur-tabs-set-bar 'left)
#+end_src

* My custom functions
** General
*** Edit config file (org mode)
#+begin_src emacs-lisp
  (defun edit-config-file-org ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c c") 'edit-config-file-org)
#+end_src
*** Edit agenda
#+begin_src emacs-lisp
  ; University
    (defun edit-my-org-agenda ()
      (interactive)
      (find-file "~/hdd/org-agenda/universidad.org"))

    (global-set-key (kbd "C-c a") 'edit-my-org-agenda)

    ; Personal
    (defun edit-my-personal-org-agenda ()
      (interactive)
      (find-file "~/hdd/org-agenda/personal.org"))

    ;(global-set-key (kbd "C-c p") 'edit-my-personal-org-agenda)

    ; Show agenda
    (global-set-key (kbd "C-c A") 'org-agenda)
#+end_src

*** Reload config file
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
*** Split windows
When making a vertical or horizontal split, the cursor will follow and make the new window the active one
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+end_src
*** kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
*** Show snippets
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'yas-describe-tables)
#+END_SRC
*** Change dictionary
*I plan to take a look for a better way of implementing this*

In order this function to work, some dictionaries must have been downloaded with the names between the quotation marks. The ones that I use are downloaded from libreoffice.
#+begin_src emacs-lisp
  (setq ispell-program-name "hunspell")

  (defun change-dictionary-to-english ()
    (interactive)
    (ispell-change-dictionary "en_GB")
    (setq flyspell-mode t)
    (flyspell-buffer)
    )

  (defun change-dictionary-to-spanish ()
    (interactive)
    (ispell-change-dictionary "es_ANY")
    (setq flyspell-mode t)
    (flyspell-buffer)
    )

  (global-set-key (kbd "<f12>") 'change-dictionary-to-spanish)
  (global-set-key (kbd "C-<f12>") 'change-dictionary-to-english)
#+end_src
*** Set font
[[https://www.youtube.com/watch?v=ZjCRxAMPdNc&t=857s][Original code 16:10]]
#+begin_src emacs-lisp
  (defun jtn/set-font-faces()
    (message "setting faces!")
    ;; Set default font
    (set-face-attribute 'default nil :font "Ubuntu Mono" :height 130))

  ;; Configure fonts when in daemon mode
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  ;;(setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (jtn/set-font-faces))))
    (jtn/set-font-faces))
#+end_src
** LaTeX
*** Insert image
#+begin_src emacs-lisp
    (defun jtn/insert-graphics ()
      (interactive)
      (setq loop-counter 1)
      (setq current-directory-string "")
      (setq separate-folders (split-string (buffer-file-name) "/"))
      (setq folder-counter (- (length separate-folders) 1))

      (while (< loop-counter folder-counter)
        (setq current-directory-string (concat current-directory-string "/"))
        (setq current-directory-string (concat current-directory-string (nth loop-counter separate-folders)))
        (setq loop-counter (+ loop-counter 1)))

        (setq current-directory-string (concat current-directory-string "/"))

        (setq images-selection (directory-files (concat current-directory-string "Images/")))

        (setq chosen-image (let ((choices images-selection))
          (ivy-read "Select image:" choices )))

        ;;(insert (concat "\\includegraphics[width=0.9\\linewidth]{Images/" chosen-image "}"))
        (insert "\\begin{figure}[h!]" "\n"
        "  \\centering" "\n"
        (concat "  \\includegraphics[width=0.9\\linewidth]{Images/" chosen-image "}") "\n"
        "  \\caption{<++>}" "\n"
        "  \\label{fig:<++>}" "\n"
        "\\end{figure}" "\n"
        "\\FloatBarrier" "\n")
  )

  (global-set-key (kbd "C-ñ i") 'jtn/insert-graphics)
#+end_src

*** Insert placeholder
#+begin_src emacs-lisp
    (defun jtn/insert-placeholder ()
      (interactive)
        (insert "<++>")
  )

  (global-set-key (kbd "C-ñ p") 'jtn/insert-placeholder)
#+end_src

*** Go to placeholder
#+begin_src emacs-lisp
    (defun jtn/goto-placeholder ()
      (interactive)
        (search-forward "<++>")
        (search-backward "<")
        (evil-change (point) (+ (point) 4))
  )

  (global-set-key (kbd "C-ñ SPC") 'jtn/goto-placeholder)
#+end_src
