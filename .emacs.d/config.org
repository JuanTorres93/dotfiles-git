* Dependencies
Currently, this configuration has only been tested in arch-based systems. It is needed the package nerd-fonts-mononoki for the correct display of the font.


Once installed it is needed to run: M-x all-the-icons-install-fonts in order to get the status bar with appealing icons.
* Built-in config
** Org mode configuration
*** Indentation
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
*** Enable line wrapping
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+end_src
*** Agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org-agenda"))
#+end_src
*** Agenda shows higher levels
This option allows the visualization of different "asterisks" levels in the agenda view
#+begin_src emacs-lisp
  (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
   (todo . " %i %-12:c")
   (tags . " %i %-12:c")
   (search . " %i %-12:c")))
#+end_src
*** Do not prompt for code execution
#+begin_src emacs-lisp
   (setq org-confirm-babel-evaluate nil)
#+end_src
*** Code evaluation
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (lisp . t)
                               (octave . t)
                               ))
#+end_src
*** Weeks in calendar starts in Mondays
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src
** Disable menu bar, tool bar and scroll bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Disable splash screen
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src

** Disable backups and automatic save
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** Follow symlinks for version control
This is done at startup in order not to get emacs asking to load its own configuration.
#+begin_src emacs-lisp
  ;(add-hook 'after-init-hook (lambda () (vc-follow-symlinks nil)))
#+end_src
** Line numbers configuration
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+end_src
** Column number
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src
** Current line highlight
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src
** Natural scroll when going beyond the screen
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src
** [NOT USED] IDO
The ido.el package by KimStorm lets you interactively do things with buffers and files. As an example, while searching for a file with C-x C-f, ido can helpfully suggest the files whose paths are closest to your current string, allowing you to find your files more quickly.

#+begin_src emacs-lisp
;  (setq ido-enable-flex-matching nil)
;  (setq ido-enable-create-new-buffer 'always)
;  (setq ido-everywhere t)
;  (ido-mode 1)
#+end_src
** Enable ibuffer
Ibuffer is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as Dired. The most important Ibuffer features are highlighting and various alternate layouts.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** Enable parenthesis matching highlight
   #+begin_src emacs-lisp
     (show-paren-mode 1)
   #+end_src
* MELPA packages
** which-key
which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings).
[[https://github.com/justbur/emacs-which-key][github page]]

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1)
    )
#+end_src
** beacon
Whenever the window scrolls a light will shine on top of your cursor so you know where it is.
[[https://github.com/Malabarba/beacon][github page]]
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src
** org-bullets
Show org-mode bullets as UTF-8 characters.
[[https://github.com/sabof/org-bullets][github page]]
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** [NOT USED] ido-vertical-mode
Makes ido-mode display vertically.
[[https://github.com/creichert/ido-vertical-mode.el][github page]]
#+begin_src emacs-lisp
;  (use-package ido-vertical-mode
;    :ensure t
;    :init
;    (ido-vertical-mode 1))
;  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq ivy-initial-inputs-alist nil) ; Don't start searches with ^
    (counsel-mode 1))

  ;; Switch buffer functionality
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
#+end_src
** ivy-rich
#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))
#+end_src
** helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-hey] . helpful-key)
    )
#+end_src
** [NOT USED] smex
- My comment:
This package acts like ido but for the M-x prompt.

- Official comment:
Smex is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to your recently and most frequently used commands. And to all the other commands, too.

[[https://github.com/nonsequitur/smex][github page]]
#+begin_src emacs-lisp
;  (use-package smex
;    :ensure t
;    :init
;    (smex-initialize)
;    :bind
;    ("M-x" . smex))
#+end_src
** avy
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree.
[[https://github.com/abo-abo/avy][github page]]
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
** Rainbow packages
*** rainbow-mode
This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background.
[[https://elpa.gnu.org/packages/rainbow-mode.html][gnu elpa page]]
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src
*** raimbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
[[https://github.com/Fanael/rainbow-delimiters][github page]]
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src
** sudo-edit
Provides a way of editting files as sudo. Currently I don't see the need of assing it a keybinding.
[[https://github.com/nflath/sudo-edit][github page]]
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src
** dashboard
An extensible emacs startup screen showing you whatâ€™s most important.

FEATURES:
- Displays an awesome Emacs banner!
- Recent files
- Bookmarks list
- Recent projects list (Depends on `projectile` or `project.el` package)
- Org mode agenda
- Register list
[[https://github.com/emacs-dashboard/emacs-dashboard][github page]]
#+begin_src emacs-lisp
      (use-package dashboard
        :ensure t
        :config
        (dashboard-setup-startup-hook)
    )

  (setq dashboard-items '((agenda)
                          (recents . 10)))
  (setq show-week-agenda-p t)
  (setq dashboard-startup-banner 'logo)
  ;(setq dashboard-banner-logo-title (emacs-version))
  ;(setq dashboard-center-content t)
#+end_src
** company
- My comment:
Autocompletion

- Official comment:
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

It comes with several back-ends such as Elisp, Clang, Semantic, Eclim, Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files, keywords and a few others.

The CAPF back-end provides a bridge to the standard completion-at-point-functions facility, and thus works with any major mode that defines a proper completion function.
[[https://company-mode.github.io/][Official page]]
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :init
    (add-hook 'prog-init-hook 'global-company-mode))

  ;; Remap the navigation to C-n and C-p instead of M-n and M-p
  (with-eval-after-load 'company
    (define-key-after company-active-map (kbd "M-n") nil)
    (define-key-after company-active-map (kbd "M-p") nil)


    (define-key-after company-active-map (kbd "C-n") #'company-select-next)
    (define-key-after company-active-map (kbd "C-p") #'company-select-previous)
    )
#+end_src
** [NOT USED] powerline-evil
I'm currently using instead doom-modeline

Utilities for better Evil support for Powerline.
[[https://github.com/johnson-christopher/powerline-evil][github page]]
#+begin_src emacs-lisp
;  (use-package powerline-evil
;    :ensure t
;    :init
;    (powerline-evil-vim-color-theme))
#+end_src
** doom-modeline
The package all-the-icons is needed for this package to be visually appealing

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

** all-the-icons
Once installed it is needed to run: M-x all-the-icons-install-fonts
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  )
#+end_src
** popup-kill-ring
- My comment:
This package shows the kill-ring when cycling through it

- Official comment:
browse your emacs kill ring in an autocomplete style popup menu 

[[https://github.com/waymondo/popup-kill-ring][github page]]
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
** evil-mode
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
[[https://github.com/emacs-evil/evil][github page]]
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (evil-mode 1))
#+end_src
** evil-org
Supplemental evil-mode key-bindings to Emacs org-mode.
[[https://github.com/Somelauw/evil-org-mode][github page]]
#+begin_src emacs-lisp
;(use-package evil-org
;  :ensure t
;  :after org
;  :hook (org-mode . (lambda () evil-org-mode))
;  :config
;  (require 'evil-org-agenda)
;  (evil-org-agenda-set-keys))
#+end_src
** swiper
Better emacs search
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+end_src
** yasnippet
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. 
[[https://github.com/joaotavora/yasnippet][github page]]

Installation
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

Initialization
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'yas-minor-mode)
  (add-hook 'rust-mode-hook 'yas-minor-mode)
  (add-hook 'org-mode-hook 'yas-minor-mode)
#+end_src
** auctex
Base package
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    ((require 'tex-site)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTex t)
    (global-font-lock-mode t)))
#+end_src

References
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'reftex-mode)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

Electric dollar symbols
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
             (lambda () (set (make-local-variable 'TeX-electric-math)
                             (cons "$" "$"))))
#+end_src

Electric left and right
#+begin_src emacs-lisp
  (setq TeX-arg-right-insert-p t)
  (setq LaTeX-electric-left-right-brace t)
#+end_src

Math mode enabled (C-c ~)
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+end_src

Automatic braces when using ^ or _
#+begin_src emacs-lisp
  (setq TeX-electric-sub-and-superscript t)
#+end_src

Autofill mode
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
#+end_src

Prettify symbols
#+begin_src emacs-lisp
  ;(add-hook 'LaTeX-mode-hook
  ;          (lambda () (local-set-key (kbd "C-c p") #'prettify-symbols-mode)))
#+end_src
** rust-mode
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    )

  (require 'rust-mode)
#+end_src

Indentation
#+begin_src emacs-lisp
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+end_src

Code formatting on save (Default C-c C-f)
#+begin_src emacs-lisp
  (setq rust-format-on-save t)
#+end_src

Cargo run
#+begin_src emacs-lisp
  (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
#+end_src
** gdscript-mode
This package adds support for the GDScript programming language from the Godot game engine in Emacs.
[[https://github.com/godotengine/emacs-gdscript-mode][github page]]
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :ensure t
    )

  (require 'gdscript-mode)
#+end_src
** lsp-mode
I use this package to allow for autocompletion in gdscript mode.

Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.

[[https://emacs-lsp.github.io/lsp-mode/page/installation/][Their website]]

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    )

  (require 'lsp-mode)
  (add-hook 'gdscript-mode-hook #'lsp)
#+end_src
** magit
Magit is an interface to the version control system Git, implemented as an Emacs package. 
[[https://github.com/magit/magit][github page]]
[[https://magit.vc/][Their website]]
[[https://emacsair.me/2017/09/01/magit-walk-through/][Tutorial 1]]
[[https://emacsair.me/2017/09/01/the-magical-git-interface/][Tutorial 2]]

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    )
#+end_src
** centaur-tabs
Aesthetic, functional and efficient tabs plugin for Emacs with a lot of customization options
[[https://github.com/ema2159/centaur-tabs][github page]]

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :config
    (centaur-tabs-mode t)
    )

  (require 'centaur-tabs)
  
;style of the tabs: if they're rounded, square, etc.
(setq centaur-tabs-style "chamfer")
;Height of the bar
(setq centaur-tabs-height 32)
;Show icons in the tabs (all-the-icons package needed)
(setq centaur-tabs-set-icons t)
;Gray out icons for the unseleted tabs
(setq centaur-tabs-gray-out-icons 'buffer)
;Display a colored bar at the left of the selected tab
(setq centaur-tabs-set-bar 'left)
#+end_src

* My custom functions
** Edit config file (org mode)
#+begin_src emacs-lisp
  (defun edit-config-file-org ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c c") 'edit-config-file-org)
#+end_src
** Edit agenda
#+begin_src emacs-lisp
; University
  (defun edit-my-org-agenda ()
    (interactive)
    (find-file "~/org-agenda/universidad.org"))

  (global-set-key (kbd "C-c a") 'edit-my-org-agenda)

  ; Personal
  (defun edit-my-personal-org-agenda ()
    (interactive)
    (find-file "~/org-agenda/personal.org"))

  (global-set-key (kbd "C-c p") 'edit-my-personal-org-agenda)

  ; Show agenda
  (global-set-key (kbd "C-c A") 'org-agenda)
#+end_src

#+RESULTS:
: org-agenda

** Edit TFM
#+begin_src emacs-lisp
  (defun edit-my-TFM ()
    (interactive)
    (find-file "~/hdd/University/Master/2020-2021/Primer cuatrimestre/Trabajo fin de mÃ¡ster/TFM Memoria/TFM.tex"))

  (global-set-key (kbd "C-c t") 'edit-my-TFM)
#+end_src
** Reload config file
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** Split windows
When making a vertical or horizontal split, the cursor will follow and make the new window the active one
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+end_src
** kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
** Show snippets
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'yas-describe-tables)
#+END_SRC
** Goto placeholder
Probably I will delete this in favour of yasnippets
#+begin_src emacs-lisp
  (defun my-goto-place-holder ()
    (interactive)
    (search-forward "<++>")
    (backward-char 4)
    (delete-char 4))

  (global-set-key (kbd "C-Ã± SPC") 'my-goto-place-holder)
#+end_src
** Change dictionary
*I plan to take a look for a better way of implementing this*

In order this function to work, some dictionaries must have been downloaded with the names between the quotation marks. The ones that I use are downloaded from libreoffice.
#+begin_src emacs-lisp
  (setq ispell-program-name "hunspell")

  (defun change-dictionary-to-english ()
    (interactive)
    (ispell-change-dictionary "en_GB")
    (setq flyspell-mode t)
    (flyspell-buffer)
    )

  (defun change-dictionary-to-spanish ()
    (interactive)
    (ispell-change-dictionary "es_ANY")
    (setq flyspell-mode t)
    (flyspell-buffer)
    )

  (global-set-key (kbd "<f12>") 'change-dictionary-to-spanish)
  (global-set-key (kbd "C-<f12>") 'change-dictionary-to-english)
#+end_src

