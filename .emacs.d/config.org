* Dependencies
Currently, this configuration has only been tested in arch-based systems. It is needed the package nerd-fonts-mononoki for the correct display of the font.
* Built-in config
** Org mode configuration
*** Indentation
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
*** Enable line wrapping
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+end_src
*** Agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org-agenda"))
#+end_src
*** Agenda shows higher levels
#+begin_src emacs-lisp
  (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
   (todo . " %i %-12:c")
   (tags . " %i %-12:c")
   (search . " %i %-12:c")))
#+end_src
** Disable menu bar, tool bar and scroll bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Disable splash screen
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src

** Line numbers configuration
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+end_src

** Column number
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src
** Current line highlight
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

** Natural scroll when going beyond the screen
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src

** IDO
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-enable-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** Enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** Enable parenthesis matching highlight
   #+begin_src emacs-lisp
     (show-paren-mode 1)
   #+end_src
* MELPA packages
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

** beacon
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** ido-vertical-mode
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** smex
This package acts like ido but for the M-x prompt.
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
** Raimbow packages
*** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src
*** raimbow-delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src
** sudo-edit
Provides a way of editting files as sudo. Currently I don't see the need of assing it a keybinding.
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    ;(setq dashboard-banner-logo-title "Initial screen")
)
#+end_src
** company
Autocompletion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  ;; Remap the navigation to C-n and C-p instead of M-n and M-p
  (with-eval-after-load 'company
    (define-key-after company-active-map (kbd "M-n") nil)
    (define-key-after company-active-map (kbd "M-p") nil)


    (define-key-after company-active-map (kbd "C-n") #'company-select-next)
    (define-key-after company-active-map (kbd "C-p") #'company-select-previous)
    )
#+end_src
** powerline-evil
#+begin_src emacs-lisp
  (use-package powerline-evil
    :ensure t
    :init
    (powerline-evil-vim-color-theme))
#+end_src
** popup-kill-ring
This package shows the kill-ring when cycling through it
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
** evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (evil-mode 1))
#+end_src
** swiper
Better emacs search
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+end_src
** yasnippets
Installation
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

Initialization
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 'yas-minor-mode)
  (add-hook 'rust-mode-hook 'yas-minor-mode)
  (add-hook 'org-mode-hook 'yas-minor-mode)
#+end_src
* My custom functions
** Edit config file (org mode)
#+begin_src emacs-lisp
  (defun edit-config-file-org ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c c") 'edit-config-file-org)
#+end_src
** Edit agenda
#+begin_src emacs-lisp
  (defun edit-my-org-agenda ()
    (interactive)
    (find-file "~/org-agenda/universidad.org"))

  (global-set-key (kbd "C-c a") 'edit-my-org-agenda)
  (global-set-key (kbd "C-c A") 'org-agenda)
#+end_src
** Reload config file
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** Split windows
When making a vertical or horizontal split, the cursor will follow and make the new window the active one
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+end_src
** kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

** Show snippets
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'yas-describe-tables)
#+END_SRC

